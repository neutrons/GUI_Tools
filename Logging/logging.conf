[loggers]
keys=root,MainApp_Init,MainApp_Debug,MainApp_Info,MainApp_Warning,MainApp_Error,MainApp_Critical,MainApp_Exception,MainApp_LogAll,MainApp_LCA,ChildApp

[handlers]
keys=consoleHandler,logfileHandler

[formatters]
keys=consoleFormatter,fileFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler,logfileHandler

[logger_MainApp_Init]
level=NOTSET
handlers=consoleHandler,logfileHandler
qualname=MainApp_Init
propagate=0 
#need propagate=0 else may see duplicate entries in log files do to upward propagation of logs
#see Logging Levels here:
#https://docs.python.org/2/howto/logging.html#logging-basic-tutorial

[logger_MainApp_Debug]
level=DEBUG
handlers=consoleHandler,logfileHandler
qualname=MainApp_Debug
propagate=0

[logger_MainApp_Info]
level=INFO
handlers=consoleHandler,logfileHandler
qualname=MainApp_Info
propagate=0

[logger_MainApp_Warning]
level=WARNING
handlers=consoleHandler,logfileHandler
qualname=MainApp_Warning
propagate=0

[logger_MainApp_Error]
level=ERROR
handlers=consoleHandler,logfileHandler
qualname=MainApp_Error
propagate=0

[logger_MainApp_Critical]
level=CRITICAL
handlers=consoleHandler,logfileHandler
qualname=MainApp_Critical
propagate=0

[logger_MainApp_Exception]
#exceptions show at ERROR log level
level=ERROR 
handlers=consoleHandler,logfileHandler
qualname=MainApp_Exception
propagate=0

[logger_MainApp_LogAll]
level=NOTSET
handlers=consoleHandler,logfileHandler
qualname=MainApp_LogAll
propagate=0

[logger_MainApp_LCA]
level=DEBUG
handlers=consoleHandler,logfileHandler
qualname=MainApp_LCA
propagate=0

[logger_ChildApp]
level=DEBUG
handlers=consoleHandler,logfileHandler
qualname=ChildApp
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=consoleFormatter
args=(sys.stdout,)

#Use this handler for single log file
#[handler_logfileHandler]
#FileHandler is for a single file - use next line for this
#class=FileHandler
#Place where the logfileHandler filepath is defined
#Note that a relative path will resolve to start from the location
#the application was launched from.
#also note that python commands can be evaluated to derive a path at runtime
#args runtime derived path to put logging files in user .Logging/<application_name> subdirectory
#args=(os.path.expanduser('~')+'/.Logging/LogExample/LogExample.log','w',)
#args example for specifying an absolute path
#args=('c:/Users/mid/.Logging/LogExample/LogExample.log','w')
#level=DEBUG
#formatter=fileFormatter

#use this handler for rotating log files
[handler_logfileHandler]
#RotatingFileHandler is for using multiple files in succession
#documentation here: https://docs.python.org/2/library/logging.handlers.html 
class=logging.handlers.RotatingFileHandler
#args list: file, 'w' to write new or 'w' for append, number of bytes until rollover, backup count
#****************************************************************************************************
args = (os.path.expanduser('~')+'/.Logging/LogExample/LogFile.log', 'a',1024*1,10)
#****************************************************************************************************
level=DEBUG
formatter=fileFormatter

#Need a valid email server for this to work...
[handler_logEmail]
class=handlers.SMTPHandler
level=NOTSET
formatter=fileFormatter
args=('localhost', 'millersd@ornl.gov', ['millersd@ornl.gov', 'sdm.work.email@gmail.com'], 'Logger Subject')

#Need a valid web server for this to work...
[handler_logHTTP]
class=handlers.HTTPHandler
level=NOTSET
formatter=fileFormatter
args=('localhost:9022', '/log', 'GET')

#See documentation here for more on handlers
#https://docs.python.org/2/library/logging.config.html

[formatter_consoleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=

[formatter_fileFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=